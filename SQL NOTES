** DELETE DUPLICATE EMAILS, KEEP HIGHEST INDEX **

DELETE p1 FROM Person p1,
    Person p2
WHERE
    p1.Email = p2.Email AND p1.Id > p2.Id
	
	
	
**** SELECT SECOND HIGHEST SALARY ***** (Create subtable to handle cases where table is less than 2)
SELECT 
(SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT 1,1) AS SecondHighestSalary;


**** SELECT Nth HIGHEST SALARY ******
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
    SET N=N-1;
  RETURN (
        SELECT (SELECT DISTINCT Salary from Employee ORDER BY Salary DESC LIMIT N,1)
      
  );
END

Select DISTINCT t1.Num from Logs t1, Logs t2, Logs t3 
HAVING (t1.Id = t2.Id -1 AND t1.Id = t3.Id-2 AND t1.Num = t2.Num AND t1.Num = t3.Num) AS ConsecutiveNums;

********** CONSECUTIVE NUMBERS *****************
# Write your MySQL query statement below
Select DISTINCT t1.Num AS ConsecutiveNums 
FROM Logs t1, Logs t2, Logs t3 
WHERE 
t1.Id = t2.Id -1 
AND t1.Id = t3.Id-2 
AND t1.Num = t2.Num 
AND t1.Num = t3.Num;


****** ITEMS NOT FOUND IN OTHER TABLE *******
SELECT customers.name as 'Customers' 
FROM customers WHERE customers.id NOT IN (SELECT customerid FROM orders)

****** COMBINE TWO TABLES *********
SELECT person.firstname, person.lastname, address.city, address.state 
FROM person
LEFT JOIN address on person.personid = address.personid;

******** JOIN TYPES ***************
https://www.w3schools.com/sql/sql_join.asp
INNER JOIN: ( (X) )
LEFT JOIN (X(x) )
RIGHT JOIN ( (x)x)
FULL OUTER JOIN (x(x)x)

****** Select employees who have a higher salary than their managers *****
*** Duplicate table, select where manager ID = ID and compare salary *****
SELECT a.name AS 'Employee'
FROM 
    Employee AS a, 
    Employee as b
Where 
    a.managerId = b.Id 
    AND a.Salary > b.Salary;

***** Datediff *****
*** Select days where the following day is warmer than the previous day ***
SELECT weather.id as 'Id'
FROM
    weather
        JOIN
    weather w ON DATEDIFF(weather.recordDate,w.recordDate)=1
    AND weather.Temperature > w.Temperature
    
***** Select movies with odd ID number where description is not boring, sort by rating *****
SELECT id,movie,description,rating FROM cinema WHERE ((id%2 != 0) AND description !='boring')
ORDER BY rating DESC


***** Convert entries per month into table with 1 column per month *****
Select id
      ,sum(Case when month = 'Jan' then revenue else null end) as Jan_Revenue
      ,sum(Case when month = 'Feb' then revenue else null end) as Feb_Revenue
      ,sum(Case when month = 'Mar' then revenue else null end) as Mar_Revenue
      ,sum(Case when month = 'Apr' then revenue else null end) as Apr_Revenue
      ,sum(Case when month = 'May' then revenue else null end) as May_Revenue
      ,sum(Case when month = 'Jun' then revenue else null end) as Jun_Revenue
      ,sum(Case when month = 'Jul' then revenue else null end) as Jul_Revenue
      ,sum(Case when month = 'Aug' then revenue else null end) as Aug_Revenue
      ,sum(Case when month = 'Sep' then revenue else null end) as Sep_Revenue
      ,sum(Case when month = 'Oct' then revenue else null end) as Oct_Revenue
      ,sum(Case when month = 'Nov' then revenue else null end) as Nov_Revenue
      ,sum(Case when month = 'Dec' then revenue else null end) as Dec_Revenue
      from Department
      group by id
      order by id
      
*** Alternatively ***
Select id, SUM(IF(month ="Jan", revenue, NULL))  "Jan_Revenue",
SUM(IF(month ="Feb", revenue, NULL))  "Feb_Revenue",
SUM(IF(month ="Mar", revenue, NULL))  "Mar_Revenue",
SUM(IF(month ="Apr", revenue, NULL))  "Apr_Revenue",
SUM(IF(month ="May", revenue, NULL))  "May_Revenue",
SUM(IF(month ="Jun", revenue, NULL))  "Jun_Revenue",
SUM(IF(month ="Jul", revenue, NULL))  "JUL_Revenue",
SUM(IF(month ="Aug", revenue, NULL))  "Aug_Revenue",
SUM(IF(month ="Sep", revenue, NULL))  "Sep_Revenue",
SUM(IF(month ="Oct", revenue, NULL))  "Oct_Revenue",
SUM(IF(month ="Nov", revenue, NULL))  "Nov_Revenue",
SUM(IF(month ="Dec", revenue, NULL))  "Dec_Revenue"
From Department
Group by id

***** Select name, population, area for big countries. Big countries have a population > 25M or area > 3M km^2 *****
SELECT name,population,area FROM world WHERE (population > 25000000) OR (area > 3000000)



******* RANK SCORES, TIED SCORES GET SAME RANK *****
SELECT 
    b.Score, 
	(SELECT COUNT(DISTINCT a.Score) FROM Scores a WHERE b.Score <= a.Score) as `Rank`
FROM Scores b ORDER BY `Rank`
